What happens when you initialize a repository? Why do you need to do it?

Initializing a repository starts the version tracking process and creates a hidden .git folder. This let's git know that these files need to be version-tracked in the .git folder.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is where files are placed before being committed. Multiple files associated with a logical change can be bundled together into one commit in this way as well. The working directory
contains all files that are / are not tracked. The repository stores files that are being tracked (that have been committed). 


How can you use the staging area to make sure you have one commit per logical change?

git diff --staged will allow you to compare the staging area changes to the most recent commit in the repository. By doing this, you can verify that the updated code is related to a logical change. If a file associated with the change deos not show in the git diff --staged response, that file can be added to the staging area and then checked by running git diff --staged again.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branhes would be helpful when adding experimental features to an existing project that is simultaneously undergoing updates. If the experimental changes wound up not working out or causing unforseen issues, the branch can be easily discarded without reverting other changes as well.


How do the diagrams help you visualize the branch structure?

The diagrams help visualize the branch structure by being visualizations. 


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches combines their code changes and related functionality. Diagrams allow for easier visualization of what is happening with our branch activities and help keep us from making mistakes.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is a big time saver, and limits some user error. Always doing merges manually would result in much more user error, but potentially lead to a better understanding of the changs that team members are trying to implement and what their goals are. There is also probably more potential for learning when doing merges manually.