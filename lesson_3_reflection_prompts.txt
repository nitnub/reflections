When would you want to use a remote repository rather than keeping all your work local?

Remote repositories would be preferable when working with multiple collaborators or when using multiple machines.


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

One reason for this is that it is important to know what you are working on. If changes were automatically flowing in, there could be confusion as to which new code is present in the file you are working on.


Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks allow you to replicate another person's repository when you don't (or do) have permission to edit theirs. Clones can be made at the local level or between local and GitHub. Branches are the labels applied to deliniations that exist within the file(s) in a repository. Forks can be helpful when you lack access to write into someone else's repository.


What is the benefit of having a copy of the last known state of the remote stored locally?

A benefit of having a copy of the last known state o the remote stored locally is the ability to work with the most recently known remote state when you are offline, such as when travelling.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Previously, I've used local saves with appended suffixes to denote the most recent change. This is much quicker in terms of creating and sending the initial file, but it can quickly get out of hand when multiple people are sharing versions back and forth.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Working in a separate branch would be good for experimental changes ("Easey Mode" example). Working in a separate branch is helpful because you don't disturb the working master, and you can always abandon an experimental change without causing any problems going back to the original code. Working in master is beneficial as it avoids a lot of the complications mentioned in the original question prompt (push / pull / etc.) and keeps all changes in a single place / chain of commits.